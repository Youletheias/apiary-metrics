// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {

    /* Metric Model */
    var App, Metric, MetricView;
    Metric = (function(_super) {
      __extends(Metric, _super);

      function Metric() {
        return Metric.__super__.constructor.apply(this, arguments);
      }

      Metric.prototype.url = 'http://private-anon-cfbd0efe2-metricsonjsapi.apiary-mock.com/metrics';

      return Metric;

    })(Backbone.Model);

    /* The Application */
    MetricView = (function(_super) {
      var el_tag;

      __extends(MetricView, _super);

      function MetricView() {
        this.initialize = __bind(this.initialize, this);
        return MetricView.__super__.constructor.apply(this, arguments);
      }

      el_tag = "#metricApp";

      MetricView.prototype.el = $(el_tag);

      MetricView.prototype.showAlert = function(id) {
        var alert;
        this.input.val('');
        alert = $('#alert-' + id);
        alert.appendTo('.page-alerts');
        return alert.slideDown();
      };

      MetricView.prototype.events = {
        "click #add-btn": "postNew"
      };

      MetricView.prototype.initialize = function() {
        return this.input = this.$("#new-data");
      };

      MetricView.prototype.postNew = function(e) {
        var metric;
        Backbone.emulateHTTP = true;
        metric = new Metric({
          data: this.input.val()
        });
        return metric.save(null, {
          success: (function(model, response) {
            return this.showAlert(1);
          }).bind(this),
          error: (function(model, response) {
            if (response.status === 201) {
              return this.showAlert(1);
            } else {
              return this.showAlert(4);
            }
          }).bind(this)
        });
      };

      return MetricView;

    })(Backbone.View);
    return App = new MetricView();
  });

}).call(this);
